use ark_bn254::{Fq12, G1Projective as G1, G2Projective as G2};
use ark_ec::{pairing::Pairing, Group};
// A = multiply(G2, 5)
// B = multiply(G1, 6)
// print(pairing(A, B))

#[test]
fn test_bilinear_pairing() {
    let g1 = G1::generator();
    let g2 = G2::generator();

    assert_eq!(g2 + g2, g2.mul_bigint([2]));

    let a = g1.mul_bigint([5]);
    let b = g2.mul_bigint([6]);
    let c: G2 = g2.mul_bigint([5 * 6]);

    // Convert projective points to affine points
    // Calculate the pairing e(A, B)

    // Now, use these affine points for pairing
    let pairing_result = ark_bn254::Bn254::pairing(a, b);
    let Fq12 { c0, c1 } = pairing_result.0;
    println!("c0.c0.c0: {:?}", c0.c0.c0.0.to_string());
    println!("c0.c0.c1: {:?}", c0.c0.c1.0.to_string());
    println!("c0.c1.c0: {:?}", c0.c1.c0.0.to_string());
    println!("c0.c1.c1: {:?}", c0.c1.c1.0.to_string());
    println!("c0.c2.c0: {:?}", c0.c2.c0.0.to_string());
    println!("c0.c2.c1: {:?}", c0.c2.c1.0.to_string());
    println!("/n");
    println!("c1.c0.c0: {:?}", c1.c0.c0.0.to_string());
    println!("c1.c0.c1: {:?}", c1.c0.c1.0.to_string());
    println!("c1.c1.c0: {:?}", c1.c1.c0.0.to_string());
    println!("c1.c1.c1: {:?}", c1.c1.c1.0.to_string());
    println!("c1.c2.c0: {:?}", c1.c2.c0.0.to_string());
    println!("c1.c2.c1: {:?}", c1.c2.c1.0.to_string());

    let pairing_result_c = ark_bn254::Bn254::pairing(g1, c);
    let Fq12 { c0, c1 } = pairing_result_c.0;
    println!("G2*30*G1: ");
    println!("c0.c0.c0: {:?}", c0.c0.c0.0.to_string());
    println!("c0.c0.c1: {:?}", c0.c0.c1.0.to_string());
    println!("c0.c1.c0: {:?}", c0.c1.c0.0.to_string());
    println!("c0.c1.c1: {:?}", c0.c1.c1.0.to_string());
    println!("c0.c2.c0: {:?}", c0.c2.c0.0.to_string());
    println!("c0.c2.c1: {:?}", c0.c2.c1.0.to_string());
    println!("/n");
    println!("c1.c0.c0: {:?}", c1.c0.c0.0.to_string());
    println!("c1.c0.c1: {:?}", c1.c0.c1.0.to_string());
    println!("c1.c1.c0: {:?}", c1.c1.c0.0.to_string());
    println!("c1.c1.c1: {:?}", c1.c1.c1.0.to_string());
    println!("c1.c2.c0: {:?}", c1.c2.c0.0.to_string());
    println!("c1.c2.c1: {:?}", c1.c2.c1.0.to_string());

    assert_eq!(pairing_result, pairing_result_c);
}

// (2737733771970589720147436295258995541017562764748775046990018238171083065584, 7355949162177082646197064865377481127039528955264110892670278171102027012957, 1389120597320745437757553030085914762401499323567753964656133081964131780715, 4070774491543958907062047566637569178763974576144707726129772744684275725184, 10823414137019623021013733227099721415368303324105358213304652659949682568395, 12697986880222911287030392175914090722292212037466224705879408804162602333706, 17697943997237703208660786428217562403504798830995307420075922564993565300645, 2702065915136914071855531840006964465333491722231468583849464437921405019853, 6762652910450025398171695126080749677225757293012137750262928324249233167133, 9495821522287762858490254871883860235240788822777455638443279749602676973720, 17813117134675140440034537765301248350834713246854720915775731738875700896539, 21027635025043266481235488683404016989778194881701554135606154029160033599034)

// Fq12 {
// CubicExtField {
//     c0: QuadExtField {
//         c0: BigInt([6782248912058519189, 17905854633700849845, 981815359735217878, 2750332953940282622]),
//         c1: BigInt([13014616448268208714, 4142271424844328294, 728210408904174525, 207215253209326080])
//     },
//     c1: QuadExtField {
//         c0: BigInt([5625932731339578848, 6904745502146605564, 11939514597710067603, 1416930562523468429]),
//         c1: BigInt([12767899052203382315, 14173989925134591536, 5418279272259683929, 291513493445614172]) },
//     c2: QuadExtField {
//         c0: BigInt([17718267794268532699, 5156438002697560843, 13706034212316115026, 791559585771054991]),
//         c1: BigInt([18000284984309305840, 15972481252625908291, 13674726003407472074, 2041438157648203876]) }
//     }

// CubicExtField {
//     c0: QuadExtField {
//         c0: BigInt([6633055433011767806, 1993283657624419055, 2556155685443179097, 674431358778088128]), c1: BigInt([1117479660932770634, 16838289109298230438, 11753762874743346121, 1500779265843046736])
//     },
//     c1: QuadExtField {
//         c0: BigInt([16118194329268941865, 6475079101949171807, 9933850523273906263, 2143968216258907750]),
//         c1: BigInt([8841354688241740695, 6537271047255149595, 11000136646916559527, 816050994711660747])
//     },
//     c2: QuadExtField {
//         c0: BigInt([11229723312742192931, 1787374600849103887, 7823112569575231955, 1416575403721338444]),
//         c1: BigInt([4490955817540267159, 6696537855995677752, 13115031265298021014, 70222861876806950]) }
// }
// }

// Fq12 = Fq6 * Fq6
// Fq6 = Fq2 * Fq2 * Fq2
