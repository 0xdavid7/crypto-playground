/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/getAddressInformation": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Address Information
         * @description Get basic information about the address: balance, code, data, last_transaction_id.
         */
        get: operations["get_address_information_getAddressInformation_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/getExtendedAddressInformation": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Extended Address Information
         * @description Similar to previous one but tries to parse additional information for known contract types. This method is based on tonlib's function *getAccountState*. For detecting wallets we recommend to use *getWalletInformation*.
         */
        get: operations["get_extended_address_information_getExtendedAddressInformation_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/getWalletInformation": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Wallet Information
         * @description Retrieve wallet information. This method parses contract state and currently supports more wallet types than getExtendedAddressInformation: simple wallet, standart wallet, v3 wallet, v4 wallet.
         */
        get: operations["get_wallet_information_getWalletInformation_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/getTransactions": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Transactions
         * @description Get transaction history of a given address.
         */
        get: operations["get_transactions_getTransactions_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/getAddressBalance": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Address Balance
         * @description Get balance (in nanotons) of a given address.
         */
        get: operations["get_address_balance_getAddressBalance_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/getAddressState": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Address
         * @description Get state of a given address. State can be either *unitialized*, *active* or *frozen*.
         */
        get: operations["get_address_getAddressState_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/packAddress": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Pack Address
         * @description Convert an address from raw to human-readable format.
         */
        get: operations["pack_address_packAddress_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/unpackAddress": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Unpack Address
         * @description Convert an address from human-readable to raw format.
         */
        get: operations["unpack_address_unpackAddress_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/getMasterchainInfo": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Masterchain Info
         * @description Get up-to-date masterchain state.
         */
        get: operations["get_masterchain_info_getMasterchainInfo_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/getMasterchainBlockSignatures": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Masterchain Block Signatures
         * @description Get up-to-date masterchain state.
         */
        get: operations["get_masterchain_block_signatures_getMasterchainBlockSignatures_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/getShardBlockProof": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Shard Block Proof
         * @description Get merkle proof of shardchain block.
         */
        get: operations["get_shard_block_proof_getShardBlockProof_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/getConsensusBlock": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Consensus Block
         * @description Get consensus block and its update timestamp.
         */
        get: operations["get_consensus_block_getConsensusBlock_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/lookupBlock": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Lookup Block
         * @description Look up block by either *seqno*, *lt* or *unixtime*.
         */
        get: operations["lookup_block_lookupBlock_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/shards": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Shards
         * @description Get shards information.
         */
        get: operations["get_shards_shards_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/getBlockTransactions": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Block Transactions
         * @description Get transactions of the given block.
         */
        get: operations["get_block_transactions_getBlockTransactions_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/getBlockTransactionsExt": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Block Transactions Ext
         * @description Get transactions of the given block.
         */
        get: operations["get_block_transactions_ext_getBlockTransactionsExt_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/getBlockHeader": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Block Header
         * @description Get metadata of a given block.
         */
        get: operations["get_block_header_getBlockHeader_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/getConfigParam": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Config Param
         * @description Get config by id.
         */
        get: operations["get_config_param_getConfigParam_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/getConfigAll": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Config All
         * @description Get cell with full config.
         */
        get: operations["get_config_all_getConfigAll_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/getOutMsgQueueSizes": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Out Msg Queue Sizes
         * @description Get info with current sizes of messages queues by shards.
         */
        get: operations["get_out_msg_queue_sizes_getOutMsgQueueSizes_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/getTokenData": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Token Data
         * @description Get NFT or Jetton information.
         */
        get: operations["get_token_data_getTokenData_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/tryLocateTx": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Try Locate Tx
         * @description Locate outcoming transaction of *destination* address by incoming message.
         */
        get: operations["get_try_locate_tx_tryLocateTx_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/tryLocateResultTx": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Try Locate Result Tx
         * @description Same as previous. Locate outcoming transaction of *destination* address by incoming message
         */
        get: operations["get_try_locate_result_tx_tryLocateResultTx_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/tryLocateSourceTx": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Try Locate Source Tx
         * @description Locate incoming transaction of *source* address by outcoming message.
         */
        get: operations["get_try_locate_source_tx_tryLocateSourceTx_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/detectAddress": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Detect Address
         * @description Get all possible address forms.
         */
        get: operations["detect_address_detectAddress_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/sendBoc": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Send Boc
         * @description Send serialized boc file: fully packed and serialized external message to blockchain.
         */
        post: operations["send_boc_sendBoc_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/sendBocReturnHash": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Send Boc Return Hash
         * @description Send serialized boc file: fully packed and serialized external message to blockchain. The method returns message hash.
         */
        post: operations["send_boc_return_hash_sendBocReturnHash_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/sendQuery": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Send Query
         * @description Send query - unpacked external message. This method takes address, body and init-params (if any), packs it to external message and sends to network. All params should be boc-serialized.
         */
        post: operations["send_query_sendQuery_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/estimateFee": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Estimate Fee
         * @description Estimate fees required for query processing. *body*, *init-code* and *init-data* accepted in serialized format (b64-encoded).
         */
        post: operations["estimate_fee_estimateFee_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/runGetMethod": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Run Get Method
         * @description Run get method on smart contract.
         */
        post: operations["run_get_method_runGetMethod_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/jsonRPC": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Jsonrpc Handler
         * @description All methods in the API are available through JSON-RPC protocol ([spec](https://www.jsonrpc.org/specification)).
         */
        post: operations["jsonrpc_handler_jsonRPC_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        /** Body_estimate_fee_estimateFee_post */
        Body_estimate_fee_estimateFee_post: {
            /**
             * Address
             * @description Address in any format
             */
            address: string;
            /**
             * Body
             * @description b64-encoded cell with message body
             */
            body: string;
            /**
             * Init Code
             * @description b64-encoded cell with init-code
             * @default
             */
            init_code: string;
            /**
             * Init Data
             * @description b64-encoded cell with init-data
             * @default
             */
            init_data: string;
            /**
             * Ignore Chksig
             * @description If true during test query processing assume that all chksig operations return True
             * @default true
             */
            ignore_chksig: boolean;
        };
        /** Body_run_get_method_runGetMethod_post */
        Body_run_get_method_runGetMethod_post: {
            /**
             * Address
             * @description Contract address
             */
            address: string;
            /**
             * Method
             * @description Method name or method id
             */
            method: string | number;
            /**
             * Stack
             * @description Array of stack elements: `[['num',3], ['cell', cell_object], ['slice', slice_object]]`
             */
            stack: unknown[][];
            /**
             * Seqno
             * @description Seqno of masterchain block at which moment the Get Method is to be executed
             */
            seqno?: number;
        };
        /** Body_send_boc_return_hash_sendBocReturnHash_post */
        Body_send_boc_return_hash_sendBocReturnHash_post: {
            /**
             * Boc
             * @description b64 encoded bag of cells
             */
            boc: string;
        };
        /** Body_send_boc_sendBoc_post */
        Body_send_boc_sendBoc_post: {
            /**
             * Boc
             * @description b64 encoded bag of cells
             */
            boc: string;
        };
        /** Body_send_query_sendQuery_post */
        Body_send_query_sendQuery_post: {
            /**
             * Address
             * @description Address in any format
             */
            address: string;
            /**
             * Body
             * @description b64-encoded boc-serialized cell with message body
             */
            body: string;
            /**
             * Init Code
             * @description b64-encoded boc-serialized cell with init-code
             * @default
             */
            init_code: string;
            /**
             * Init Data
             * @description b64-encoded boc-serialized cell with init-data
             * @default
             */
            init_data: string;
        };
        /** DeprecatedTonResponseJsonRPC */
        DeprecatedTonResponseJsonRPC: {
            /** Ok */
            ok: boolean;
            /** Result */
            result?: unknown;
            /** Error */
            error?: string;
            /** Code */
            code?: number;
            /** Id */
            id: string;
            /**
             * Jsonrpc
             * @default 2.0
             */
            jsonrpc: string;
        };
        /** TonRequestJsonRPC */
        TonRequestJsonRPC: {
            /** Method */
            method: string;
            /**
             * Params
             * @default {}
             */
            params: Record<string, never>;
            /** Id */
            id?: string;
            /** Jsonrpc */
            jsonrpc?: string;
        };
        /** TonResponse */
        TonResponse: {
            /** Ok */
            ok: boolean;
            /** Result */
            result?: string | unknown[] | Record<string, never>;
            /** Error */
            error?: string;
            /** Code */
            code?: number;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    get_address_information_getAddressInformation_get: {
        parameters: {
            query: {
                /** @description Identifier of target TON account in any form. */
                address: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TonResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Lite Server Timeout */
            504: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    get_extended_address_information_getExtendedAddressInformation_get: {
        parameters: {
            query: {
                /** @description Identifier of target TON account in any form. */
                address: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TonResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Lite Server Timeout */
            504: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    get_wallet_information_getWalletInformation_get: {
        parameters: {
            query: {
                /** @description Identifier of target TON account in any form. */
                address: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TonResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Lite Server Timeout */
            504: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    get_transactions_getTransactions_get: {
        parameters: {
            query: {
                /** @description Identifier of target TON account in any form. */
                address: string;
                /** @description Maximum number of transactions in response. */
                limit?: number;
                /** @description Logical time of transaction to start with, must be sent with *hash*. */
                lt?: number;
                /** @description Hash of transaction to start with, in *base64* or *hex* encoding , must be sent with *lt*. */
                hash?: string;
                /** @description Logical time of transaction to finish with (to get tx from *lt* to *to_lt*). */
                to_lt?: number;
                /** @description By default getTransaction request is processed by any available liteserver. If *archival=true* only liteservers with full history are used. */
                archival?: boolean;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TonResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Lite Server Timeout */
            504: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    get_address_balance_getAddressBalance_get: {
        parameters: {
            query: {
                /** @description Identifier of target TON account in any form. */
                address: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TonResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Lite Server Timeout */
            504: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    get_address_getAddressState_get: {
        parameters: {
            query: {
                /** @description Identifier of target TON account in any form. */
                address: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TonResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Lite Server Timeout */
            504: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    pack_address_packAddress_get: {
        parameters: {
            query: {
                /**
                 * @description Identifier of target TON account in raw form.
                 * @example 0:83DFD552E63729B472FCBCC8C45EBCC6691702558B68EC7527E1BA403A0F31A8
                 */
                address: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TonResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Lite Server Timeout */
            504: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    unpack_address_unpackAddress_get: {
        parameters: {
            query: {
                /**
                 * @description Identifier of target TON account in user-friendly form
                 * @example EQCD39VS5jcptHL8vMjEXrzGaRcCVYto7HUn4bpAOg8xqB2N
                 */
                address: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TonResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Lite Server Timeout */
            504: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    get_masterchain_info_getMasterchainInfo_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TonResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Lite Server Timeout */
            504: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    get_masterchain_block_signatures_getMasterchainBlockSignatures_get: {
        parameters: {
            query: {
                seqno: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TonResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Lite Server Timeout */
            504: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    get_shard_block_proof_getShardBlockProof_get: {
        parameters: {
            query: {
                /** @description Block workchain id */
                workchain: number;
                /** @description Block shard id */
                shard: number;
                /** @description Block seqno */
                seqno: number;
                /** @description Seqno of masterchain block starting from which proof is required. If not specified latest masterchain block is used. */
                from_seqno?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TonResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Lite Server Timeout */
            504: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    get_consensus_block_getConsensusBlock_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TonResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Lite Server Timeout */
            504: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    lookup_block_lookupBlock_get: {
        parameters: {
            query: {
                /** @description Workchain id to look up block in */
                workchain: number;
                /** @description Shard id to look up block in */
                shard: number;
                /** @description Block's height */
                seqno?: number;
                /** @description Block's logical time */
                lt?: number;
                /** @description Block's unixtime */
                unixtime?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TonResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Lite Server Timeout */
            504: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    get_shards_shards_get: {
        parameters: {
            query: {
                /** @description Masterchain seqno to fetch shards of. */
                seqno: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TonResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Lite Server Timeout */
            504: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    get_block_transactions_getBlockTransactions_get: {
        parameters: {
            query: {
                workchain: number;
                shard: number;
                seqno: number;
                root_hash?: string;
                file_hash?: string;
                after_lt?: number;
                after_hash?: string;
                count?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TonResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Lite Server Timeout */
            504: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    get_block_transactions_ext_getBlockTransactionsExt_get: {
        parameters: {
            query: {
                workchain: number;
                shard: number;
                seqno: number;
                root_hash?: string;
                file_hash?: string;
                after_lt?: number;
                after_hash?: string;
                count?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TonResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Lite Server Timeout */
            504: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    get_block_header_getBlockHeader_get: {
        parameters: {
            query: {
                workchain: number;
                shard: number;
                seqno: number;
                root_hash?: string;
                file_hash?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TonResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Lite Server Timeout */
            504: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    get_config_param_getConfigParam_get: {
        parameters: {
            query: {
                /** @description Config id */
                config_id: number;
                /** @description Masterchain seqno. If not specified, latest blockchain state will be used. */
                seqno?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TonResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Lite Server Timeout */
            504: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    get_config_all_getConfigAll_get: {
        parameters: {
            query?: {
                /** @description Masterchain seqno. If not specified, latest blockchain state will be used. */
                seqno?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TonResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Lite Server Timeout */
            504: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    get_out_msg_queue_sizes_getOutMsgQueueSizes_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TonResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Lite Server Timeout */
            504: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    get_token_data_getTokenData_get: {
        parameters: {
            query: {
                /** @description Address of NFT collection/item or Jetton master/wallet smart contract */
                address: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TonResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Lite Server Timeout */
            504: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    get_try_locate_tx_tryLocateTx_get: {
        parameters: {
            query: {
                source: string;
                destination: string;
                created_lt: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TonResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Lite Server Timeout */
            504: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    get_try_locate_result_tx_tryLocateResultTx_get: {
        parameters: {
            query: {
                source: string;
                destination: string;
                created_lt: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TonResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Lite Server Timeout */
            504: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    get_try_locate_source_tx_tryLocateSourceTx_get: {
        parameters: {
            query: {
                source: string;
                destination: string;
                created_lt: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TonResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Lite Server Timeout */
            504: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    detect_address_detectAddress_get: {
        parameters: {
            query: {
                /** @description Identifier of target TON account in any form. */
                address: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TonResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Lite Server Timeout */
            504: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    send_boc_sendBoc_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Body_send_boc_sendBoc_post"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TonResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Lite Server Timeout */
            504: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    send_boc_return_hash_sendBocReturnHash_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Body_send_boc_return_hash_sendBocReturnHash_post"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TonResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Lite Server Timeout */
            504: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    send_query_sendQuery_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Body_send_query_sendQuery_post"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TonResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Lite Server Timeout */
            504: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    estimate_fee_estimateFee_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Body_estimate_fee_estimateFee_post"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TonResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Lite Server Timeout */
            504: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    run_get_method_runGetMethod_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Body_run_get_method_runGetMethod_post"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TonResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Lite Server Timeout */
            504: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    jsonrpc_handler_jsonRPC_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["TonRequestJsonRPC"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DeprecatedTonResponseJsonRPC"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Lite Server Timeout */
            504: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
}
